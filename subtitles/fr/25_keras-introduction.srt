1
00:00:05,120 --> 00:00:10,640
Dans cette vidéo, je vais vous présenter très rapidement comment nos transformers fonctionnent

2
00:00:10,640 --> 00:00:17,120
avec Tensorflow et Keras ! L'explication très courte est que tous nos modèles Tensorflow

3
00:00:17,120 --> 00:00:23,760
sont également des objets de modèle Keras, et qu'ils disposent donc de l'API de modèle Keras standard. Si vous êtes un

4
00:00:23,760 --> 00:00:28,640
ingénieur en ML expérimenté qui utilise beaucoup Keras, c'est probablement tout ce que vous devez savoir pour commencer à travailler

5
00:00:28,640 --> 00:00:34,160
avec eux. Mais pour tous les autres, y compris les ingénieurs prodigues de PyTorch

6
00:00:34,160 --> 00:00:39,360
qui reviennent au bercail, je vais présenter rapidement les modèles Keras et la façon dont nous travaillons avec eux.

7
00:00:40,320 --> 00:00:46,240
Dans d'autres vidéos, que je mettrai en lien ci-dessous, j'expliquerai plus en détail l'entraînement avec les modèles Keras.

8
00:00:46,240 --> 00:00:54,640
Mais d'abord, qu'est-ce qu'un modèle Keras ? Votre modèle contient essentiellement l'intégralité de votre réseau :

9
00:00:54,640 --> 00:00:59,600
il contient les couches et les poids de ces couches, et indique aussi au modèle ce

10
00:00:59,600 --> 00:01:04,560
qu'il faut en faire ; il définit l'intégralité du chemin de vos entrées à vos sorties.

11
00:01:05,280 --> 00:01:10,880
Si vous avez déjà utilisé Keras, vous avez probablement commencé par créer votre modèle à la

12
00:01:10,880 --> 00:01:17,600
main : vous avez ajouté une couche après l'autre, peut-être en utilisant `model.add()` ou l'approche fonctionnelle.

13
00:01:18,480 --> 00:01:26,240
Et il n'y a rien de mal à ça ! Beaucoup de bons modèles sont construits de cette façon. Mais vous pouvez également précharger un modèle entier, poids et tout.

14
00:01:26,960 --> 00:01:33,920
C'est vraiment utile, car si vous essayez de lire le papier ou de regarder le code,

15
00:01:33,920 --> 00:01:38,400
vous verrez que l'intérieur d'un transformer est assez complexe, et tout écrire à partir de

16
00:01:38,400 --> 00:01:43,280
zéro et le faire correctement serait difficile même pour un ingénieur en ML expérimenté.

17
00:01:43,280 --> 00:01:48,080
Mais comme tout est regroupé dans un modèle, vous n'avez pas à vous soucier de cette complexité si

18
00:01:48,080 --> 00:01:53,840
vous ne le souhaitez pas ! Vous avez la possibilité d'écrire le modèle de votre choix, mais vous pouvez également

19
00:01:54,400 --> 00:01:58,640
charger un transformer pré-entraîné et préconfiguré en une seule ligne de code.

20
00:02:00,000 --> 00:02:09,040
Et quand je mentionnais l'API Keras avant, l'avantage est que vous écriviez votre propre modèle à partir de zéro ou que vous chargiez un modèle pré-entraîné, vous interagissez avec le

21
00:02:09,040 --> 00:02:14,560
modèle de la même manière : grâce aux mêmes méthodes que vous verrez encore et encore,

22
00:02:15,200 --> 00:02:22,000
comme `fit`, `compile` et `prédict`, et nous couvrirons des exemples concrets d'utilisation de ces

23
00:02:22,000 --> 00:02:26,960
méthodes dans d'autres vidéos que je mettrai en lien ci-dessous. Pour l'instant, l'élément clé à retenir de cette vidéo, si

24
00:02:26,960 --> 00:02:31,920
vous n'avez jamais vu Keras auparavant, est que cette encapsulation soignée signifie que toute la complexité d'

25
00:02:31,920 --> 00:02:36,560
un énorme réseau de neurones devient gérable, car vous interagissez avec lui exactement de la même manière, en

26
00:02:36,560 --> 00:02:49,760
utilisant exactement les mêmes méthodes, comme vous le feriez avec un gros modèle de langue ou avec un modèle simple que vous avez écrit à la main.