1
00:00:05,440 --> 00:00:13,760
Dans cette vidéo, nous allons apprendre les premières choses à faire lorsque vous obtenez une erreur. Pour ne pas jeter votre ordinateur portable par la fenêtre.

2
00:00:13,760 --> 00:00:18,320
Supposons que nous souhaitions utiliser le pipeline de réponse aux questions sur un modèle particulier et que nous obtenions l'

3
00:00:18,320 --> 00:00:24,160
erreur suivante. Les erreurs dans Python peuvent sembler écrasantes car vous obtenez tellement d'informations d'affichées,

4
00:00:24,160 --> 00:00:28,160
mais c'est parce que Python essaie de vous aider du mieux qu'il peut pour résoudre votre problème.

5
00:00:28,880 --> 00:00:32,000
Dans cette vidéo, nous verrons comment interpréter le rapport d'erreur que nous recevons.

6
00:00:33,280 --> 00:00:37,920
La première chose à remarquer tout en haut est que Python vous montre avec une flèche claire la

7
00:00:37,920 --> 00:00:42,400
ligne de code qui a déclenché l'erreur. Ainsi, vous n'avez pas à manipuler votre code et à supprimer

8
00:00:42,400 --> 00:00:47,520
des lignes aléatoires pour déterminer d'où vient l'erreur, vous avez la réponse juste devant vous, ici.

9
00:00:48,880 --> 00:00:53,280
Les flèches que vous voyez ci-dessous sont les parties du code que Python a essayé d'exécuter lors de l'exécution de l'

10
00:00:53,280 --> 00:00:59,600
instruction. Nous sommes ici dans la fonction `pipeline` et l'erreur s'est produite sur cette ligne lors de la

11
00:00:59,600 --> 00:01:04,800
tentative d'exécution de la fonction `check_tasks`, qui a ensuite déclenché l'erreur « KeyError » que nous voyons affichée.

12
00:01:06,480 --> 00:01:11,600
Notez que Python vous indique exactement où les fonctions qu'il exécute vivent. Donc si vous vous sentez

13
00:01:11,600 --> 00:01:17,680
aventureux, vous pouvez même aller inspecter le code source. Tout cela s'appelle le « Traceback ».

14
00:01:19,840 --> 00:01:23,600
Si vous exécutez votre code sur Colab, le « traceback » est automatiquement réduit,

15
00:01:23,600 --> 00:01:29,920
vous devez donc cliquer pour le développer. À sa toute fin, vous obtenez enfin le

16
00:01:29,920 --> 00:01:34,960
message d'erreur réel. La première chose à faire lorsque vous rencontrez une erreur est de lire ce

17
00:01:34,960 --> 00:01:40,640
message d'erreur. Ici, il nous dit qu'il ne connaît pas la tâche de réponse aux questions et

18
00:01:40,640 --> 00:01:46,560
nous donne utilement la liste des tâches prises en charge... dans laquelle nous pouvons voir que la tâche de réponse aux questions est bien présente.

19
00:01:47,280 --> 00:01:51,680
En y regardant de plus près, nous avons utilisé un trait de soulignement pour séparer les deux mots

20
00:01:51,680 --> 00:01:55,040
alors que la tâche est écrite avec un moins. Nous devrions donc corriger cela !

21
00:01:57,280 --> 00:02:02,160
Maintenant, réessayons notre code avec la tâche correctement écrite. Et que se passe-t-il aujourd'hui ? Encore une

22
00:02:02,160 --> 00:02:08,000
erreur ! Comme nous l'avons vu précédemment, nous allons regarder en bas pour lire le message d'erreur réel. Il nous dit

23
00:02:08,000 --> 00:02:13,600
que nous devons vérifier que notre modèle est un identifiant de modèle correct. Alors allons sur hf.co/models.

24
00:02:14,480 --> 00:02:18,320
Nous pouvons voir notre modèle répertorié ici parmi ceux disponibles pour la réponse aux questions.

25
00:02:19,120 --> 00:02:22,480
La différence est qu'il s'écrit distilBERT avec un « l »,

26
00:02:22,480 --> 00:02:28,960
et nous en avons utilisé deux. Alors réparons ça. Nous obtenons enfin nos résultats ! Si votre erreur est plus complexe,

27
00:02:28,960 --> 00:02:35,840
vous devrez peut-être utiliser le débogueur Python, consultez les vidéos liées ci-dessous pour savoir comment !