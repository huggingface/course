1
00:00:05,680 --> 00:00:06,720
Функция конвейер.

2
00:00:09,360 --> 00:00:13,280
Функция конвейера является наиболее высокоуровневым API библиотеки Transformers.

3
00:00:13,840 --> 00:00:21,200
Она объединяет все этапы перехода от необработанных текстов к пригодным для использования прогнозам.

4
00:00:21,200 --> 00:00:32,800
Используемая модель лежит в основе конвейера, но конвейер также включает всю необходимую предварительную обработку (поскольку модель ожидает не тексты, а числа), а также некоторую постобработку, чтобы сделать вывод модели человекочитаемым.

5
00:00:32,800 --> 00:00:39,440
Давайте рассмотрим первый пример с конвейером анализа настроений.

6
00:00:40,480 --> 00:00:53,120
Этот конвейер выполняет классификацию текста на заданном входе и определяет, является ли он положительным или отрицательным. Здесь он приписывает данному тексту положительную метку с достоверностью 95%.

7
00:00:55,440 --> 00:01:16,480
В один конвейер можно передать несколько текстов, которые будут обработаны и пропущены через модель вместе, как пакет. На выходе получается список отдельных результатов, расположенных в том же порядке, что и входные тексты. Здесь мы находим ту же метку и оценку для первого текста, а второй текст оценивается как положительный с достоверностью 99,99%.

8
00:01:18,480 --> 00:01:22,720
Конвейер нулевой классификации - это более общий конвейер классификации текста:

9
00:01:23,360 --> 00:01:28,320
он позволяет задать нужные вам метки. Здесь мы хотим классифицировать наш входной текст по меткам "образование", "политика" и "бизнес".

10
00:01:28,320 --> 00:01:39,360
Конвейер успешно распознает, что он больше связан с образованием, чем с другими метками, с достоверностью 84%.

11
00:01:41,440 --> 00:01:47,360
Перейдём к другим задачам, конвейер генерации текста автоматически заполнит заданную строку.

12
00:01:47,360 --> 00:01:52,560
Вывод генерируется с некоторой долей случайности, поэтому он меняется каждый раз, когда вы вызываете объект генератора по заданному запросу.

13
00:01:52,560 --> 00:02:03,920
До сих пор мы использовали API конвейера с моделью по умолчанию, связанной с каждой задачей, но вы можете использовать его с любой моделью, которая была предварительно обучена или тонко настроена для этой задачи.

14
00:02:06,320 --> 00:02:12,320
Перейдя в хаб моделей (huggingface.co/models), вы можете отфильтровать доступные модели по задачам.

15
00:02:13,120 --> 00:02:20,080
В нашем предыдущем примере по умолчанию использовалась модель gpt2, но существует множество других моделей, и не только на английском языке!

16
00:02:21,280 --> 00:02:27,120
Давайте вернемся к конвейеру генерации текста и загрузим в него другую модель, distilgpt2.

17
00:02:27,120 --> 00:02:33,120
Это облегченная версия gpt2, созданная командой Hugging Face.

18
00:02:33,120 --> 00:02:43,520
При применении конвейера к заданному запросу мы можем указать несколько аргументов, например, максимальную длину генерируемых текстов или количество предложений, которые мы хотим получить (поскольку в генерации присутствует некоторая случайность).

19
00:02:45,920 --> 00:02:55,480
Генерация текста путем угадывания следующего слова в предложении была целью предварительного обучения GPT-2, конвейер заполнения маски является целью предварительного обучения BERT, которая заключается в угадывании значения замаскированного слова.

20
00:02:56,240 --> 00:03:05,480
В этом случае мы спрашиваем два наиболее вероятных значения для пропущенных слов (согласно модели) и получаем математические или вычислительные ответы.

21
00:03:09,120 --> 00:03:13,920
Еще одна задача, которую может выполнять модель Transformers, - классифицировать каждое слово в предложении, а не предложение целиком.

22
00:03:14,720 --> 00:03:29,360
Одним из примеров этого является распознавание именованных сущностей, которое представляет собой задачу идентификации сущностей, таких как люди, организации или места в предложении.

23
00:03:29,360 --> 00:03:36,000
Здесь модель правильно находит человека (Sylvain), организацию (Hugging Face), а также местоположение (Brooklyn) во входном тексте.

24
00:03:37,440 --> 00:03:46,080
Аргумент grouped_entities=True используется для того, чтобы конвейер сгруппировал различные слова, связанные с одной и той же сущностью (например, "Hugging" и "Face" здесь).

25
00:03:48,000 --> 00:03:52,160
Еще одна задача, доступная с помощью API конвейера, - экстрактивный ответ на вопрос.

26
00:03:52,720 --> 00:04:03,920
Предоставив контекст и вопрос, модель определит участок текста в контексте, содержащий ответ на вопрос.

27
00:04:03,920 --> 00:04:07,840
Получение кратких резюме очень длинных статей - это то, с чем также может помочь библиотека Transformers с помощью конвейера суммаризации.

28
00:04:09,360 --> 00:04:15,040
Наконец, последней задачей, поддерживаемой API конвейера, является перевод.

29
00:04:15,040 --> 00:04:19,440
Здесь мы используем французско-английскую модель, найденную в хабе моделей, чтобы получить английскую версию нашего входного текста.

30
00:04:21,360 --> 00:04:24,720
Вот краткий обзор всех задач, которые мы рассмотрели в этом видео.

31
00:04:25,280 --> 00:04:27,840
Попробуйте это сделать с помощью виджетов инференса в хабе моделей!
