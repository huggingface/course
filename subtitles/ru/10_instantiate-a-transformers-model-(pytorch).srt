1
00:00:05,120 --> 00:00:07,440
Как инстанцировать модель Transformers?

2
00:00:08,640 --> 00:00:12,960
В этом видео мы рассмотрим, как можно создать и использовать модель из библиотеки Transformers.

3
00:00:14,160 --> 00:00:19,440
Как мы уже видели, класс AutoModel позволяет вам создать предварительно обученную модель из любой контрольной точки на хабе Hugging Face.

4
00:00:19,440 --> 00:00:30,800
Он выберет нужный класс модели из библиотеки, чтобы создать правильную архитектуру и загрузить в нее веса предварительно обученной модели.

5
00:00:30,800 --> 00:00:37,760
Как мы видим, при задании контрольной точки BERT мы получаем модель BertModel, и аналогично для GPT-2 или BART.

6
00:00:39,680 --> 00:00:48,400
За кулисами этот API может принять имя контрольной точки на хабе, в этом случае он будет загружать и кэшировать файл конфигурации, а также файл весов модели.

7
00:00:48,400 --> 00:00:54,800
Вы также можете указать путь к локальной папке, содержащей действительный файл конфигурации и файл весов модели.

8
00:00:54,800 --> 00:01:04,960
Чтобы создать предварительно обученную модель, API AutoModel сначала открывает файл конфигурации, чтобы посмотреть класс конфигурации, который должен быть использован.

9
00:01:06,080 --> 00:01:12,240
Класс конфигурации зависит от типа модели (например, BERT, GPT-2 или BART).

10
00:01:13,440 --> 00:01:18,160
Как только у него есть соответствующий класс конфигурации, он может инстанцировать эту конфигурацию, которая представляет собой чертеж, позволяющий узнать, как создать модель.

11
00:01:18,160 --> 00:01:29,360
Он также использует этот класс конфигурации для поиска подходящего класса модели, который в сочетании с загруженной конфигурацией загружает модель.

12
00:01:30,800 --> 00:01:35,520
Эта модель еще не является нашей предварительно обученной моделью, так как она только что была инициализирована со случайными весами.

13
00:01:36,560 --> 00:01:42,960
Последним шагом является загрузка весов из файла модели в эту модель.

14
00:01:42,960 --> 00:01:49,920
Чтобы легко загрузить конфигурацию модели из любой контрольной точки или папки, содержащей папку конфигурации, мы можем использовать класс AutoConfig.

15
00:01:51,040 --> 00:01:55,360
Как и класс AutoModel, он будет выбирать нужный класс конфигурации из библиотеки.

16
00:01:56,800 --> 00:02:01,360
Мы также можем использовать конкретный класс, соответствующий контрольной точке, но нам придется менять код каждый раз, когда мы хотим попробовать другую модель.

17
00:02:01,360 --> 00:02:12,720
Как мы уже говорили, конфигурация модели - это чертеж, который содержит всю информацию, необходимую для создания архитектуры модели.

18
00:02:13,600 --> 00:02:19,680
Например, модель BERT, связанная с контрольной точкой bert-base-cased, имеет 12 слоев, скрытый размер 768 и размер словаря 28 996.

19
00:02:19,680 --> 00:02:33,120
Получив конфигурацию, мы можем создать модель, которая имеет ту же архитектуру, что и наша контрольная точка, но инициализируется случайным образом.

20
00:02:33,120 --> 00:02:37,840
Затем мы можем обучить её с нуля, как любой модуль PyTorch/TensorFlow модель.

21
00:02:38,800 --> 00:02:42,960
Мы также можем изменить любую часть конфигурации, используя ключевые слова аргументов.

22
00:02:43,920 --> 00:02:49,280
Второй фрагмент кода создает случайно инициализированную модель BERT с десятью слоями вместо 12.

23
00:02:49,280 --> 00:02:56,160
Сохранить модель после ее обучения или тонкой настройки очень просто: нужно просто использовать метод save_pretrained.

24
00:02:56,160 --> 00:03:08,240
Здесь модель будет сохранена в папке с именем my-bert-model внутри текущего рабочего каталога. Затем такую модель можно будет повторно загрузить с помощью метода from_pretrained.