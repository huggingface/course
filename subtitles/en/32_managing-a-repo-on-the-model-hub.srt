1
00:00:02,560 --> 00:00:09,130
In this video, we're going to understand how
to manage a model repository on the HuggingFace

2
00:00:09,130 --> 00:00:10,920
model hub.

3
00:00:10,920 --> 00:00:15,370
In order to handle a repository, you should
first have a Hugging Face account.

4
00:00:15,370 --> 00:00:20,310
A link to create a new account is available
in the description.

5
00:00:20,310 --> 00:00:25,279
Once you are logged in, you can create a new
repository by clicking on the "New model"

6
00:00:25,279 --> 00:00:26,279
option.

7
00:00:26,279 --> 00:00:28,910
You should be facing a similar modal to the
following.

8
00:00:28,910 --> 00:00:34,900
In the "Owner" input, you can put either your
own namespace or any of your organisations

9
00:00:34,900 --> 00:00:36,719
namespaces.

10
00:00:36,719 --> 00:00:41,739
The model name is the model identifier that
will then be used to identify your model on

11
00:00:41,739 --> 00:00:44,250
your chosen namespace.

12
00:00:44,250 --> 00:00:47,450
The final choice is between public and private.

13
00:00:47,450 --> 00:00:50,100
Public models are accessible by anyone.

14
00:00:50,100 --> 00:00:55,030
This is the recommended, free option, as this
makes your model easily accessible and shareable.

15
00:00:55,030 --> 00:01:00,440
The owners of your namespace are the only
ones who can update and change your model.

16
00:01:00,440 --> 00:01:03,210
A more advanced option is the private option.

17
00:01:03,210 --> 00:01:08,460
In this case, only the owners of your namespace
will have visibility over your model.

18
00:01:08,460 --> 00:01:15,010
Other users won't know it exists and will
not be able to use it.

19
00:01:15,010 --> 00:01:18,320
Let's create a dummy model to play with.

20
00:01:18,320 --> 00:01:22,360
Once your model is created, comes the management
of that model!

21
00:01:22,360 --> 00:01:24,170
Three tabs are available to you.

22
00:01:24,170 --> 00:01:29,070
You're facing the first one, which is the
model card page; this is the page used to

23
00:01:29,070 --> 00:01:31,170
showcase your model to the world.

24
00:01:31,170 --> 00:01:34,600
We'll see how it can be completed in a bit.

25
00:01:34,600 --> 00:01:38,479
The second one is the "Files & Versions".

26
00:01:38,479 --> 00:01:43,310
Your model itself is a git repository - if
you're unaware of what is a git repository,

27
00:01:43,310 --> 00:01:46,439
you can think of it as a folder containing
files.

28
00:01:46,439 --> 00:01:51,000
If you have never used git before, we recommend
looking at an introduction like the one provided

29
00:01:51,000 --> 00:01:53,960
in this video's description.

30
00:01:53,960 --> 00:01:59,020
The git repository allows you to see the changes
happening over time in this folder, hence

31
00:01:59,020 --> 00:02:00,960
the term "Versions".

32
00:02:00,960 --> 00:02:07,130
We'll see how to add files and versions in
a bit.

33
00:02:07,130 --> 00:02:12,069
The final tab is the "Settings" tab, which
allow you to manage your model's visibility

34
00:02:12,069 --> 00:02:14,780
and availability.

35
00:02:14,780 --> 00:02:18,860
Let's first start by adding files to the repository.

36
00:02:18,860 --> 00:02:23,459
Files can be added through the web interface
thanks to the "Add File" button.

37
00:02:23,459 --> 00:02:28,849
The added files can be of any type: python,
json, text, you name it!

38
00:02:28,849 --> 00:02:35,110
Alongside your added file and its content,
you should name your change, or commit.

39
00:02:35,110 --> 00:02:42,670
Generally, adding files is simpler when using
the command line.

40
00:02:42,670 --> 00:02:47,310
We'll showcase how to do this using git.

41
00:02:47,310 --> 00:02:52,290
In addition to git, we're using git-lfs, which
stands for large file storage in order to

42
00:02:52,290 --> 00:02:53,560
manage large model files.

43
00:02:53,560 --> 00:03:00,980
First, I make sure that both git and git-lfs
are correctly installed on my system.

44
00:03:00,980 --> 00:03:08,280
Links to install git & git-lfs are provided
in the video description.

45
00:03:08,280 --> 00:03:12,470
Then, we can get to work by cloning the repository
locally.

46
00:03:12,470 --> 00:03:14,990
We have a repository with a single file!

47
00:03:14,990 --> 00:03:24,180
The file that we have just added to the repository
using the web interface.

48
00:03:24,180 --> 00:03:45,549
We can edit it to see the contents of this
file and update these.

49
00:03:45,549 --> 00:04:04,439
It just turns out I have a model handy, that
can be used for sentiment analysis.

50
00:04:04,439 --> 00:04:10,790
I'll simply copy over the contents to this
folder.

51
00:04:10,790 --> 00:04:20,030
This includes the model weights, configuration
file and tokenizer to the repository.

52
00:04:20,030 --> 00:04:35,850
I can then track these two files with the
git add command.

53
00:04:35,850 --> 00:04:40,639
Then, I commit the changes.

54
00:04:40,639 --> 00:04:54,640
I'm giving this commit the title of "Add model
weights and configuration".

55
00:04:54,640 --> 00:05:08,910
Finally, I can push the new commit to the
huggingface.co remote.

56
00:05:08,910 --> 00:05:39,389
When going back to the files & versions tab,
we can now see the newly added commit with

57
00:05:39,389 --> 00:05:41,090
the updated files.

58
00:05:41,090 --> 00:05:59,250
We have seen two ways of adding files to a
repository, a third way is explored in the

59
00:05:59,250 --> 00:06:07,310
video about the push to hub API.

60
00:06:07,310 --> 00:06:25,099
A link to this video is in 

61
00:06:25,099 --> 00:06:45,470
the description.

62
00:06:45,470 --> 00:06:50,229
Go back to readme.

63
00:06:50,229 --> 00:06:57,510
Unfortunately, the front page of our model
is still very empty.

64
00:06:57,510 --> 00:07:01,860
Let's add a README markdown file to complete
it a little bit.

65
00:07:01,860 --> 00:07:06,770
This README is known as the modelcard, and
it's arguably as important as the model and

66
00:07:06,770 --> 00:07:08,770
tokenizer files in a model repository.

67
00:07:08,770 --> 00:07:15,990
It is the central definition of the model,
ensuring reusability by fellow community members

68
00:07:15,990 --> 00:07:21,210
and reproducibility of results, and providing
a platform on which other members may build

69
00:07:21,210 --> 00:07:22,510
their artifacts.

70
00:07:22,510 --> 00:07:27,669
We'll only add a title and a small description
here for simplicity's sake, but we encourage

71
00:07:27,669 --> 00:07:33,000
you to add information relevant to how was
the model trained, its intended uses and limitations,

72
00:07:33,000 --> 00:07:39,190
as well as its identified and potential biases,
evaluation results and code samples on how

73
00:07:39,190 --> 00:07:41,479
your model should be used.

74
00:07:41,479 --> 00:07:44,220
Great work contributing a model to the model
hub!

75
00:07:44,220 --> 00:07:53,110
This model can now be used in downstream libraries
simply by specifying your model identifier.
