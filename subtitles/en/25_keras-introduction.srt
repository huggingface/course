1
00:00:05,120 --> 00:00:10,640
In this video, I'm going to give you a very quick 
introduction to how our transformers models work  

2
00:00:10,640 --> 00:00:17,120
together with Tensorflow and Keras! The very short 
explanation is that all of our Tensorflow models  

3
00:00:17,120 --> 00:00:23,760
are also Keras model objects, and so they have the 
standard Keras model API. If you're an experienced  

4
00:00:23,760 --> 00:00:28,640
ML engineer who's used Keras a lot, that's 
probably all you need to know to start working  

5
00:00:28,640 --> 00:00:34,160
with them. But for everyone else, including 
the prodigal PyTorch engineers out there who  

6
00:00:34,160 --> 00:00:39,360
are returning to the fold, I'm going to quickly 
introduce Keras models, and how we work with them.  

7
00:00:40,320 --> 00:00:46,240
In other videos, which I'll link below, I'll run 
through training with Keras models in more detail.  

8
00:00:46,240 --> 00:00:54,640
But first, what is a Keras model? Your model 
basically contains your entire network:  

9
00:00:54,640 --> 00:00:59,600
It contains the layers, and the weights for 
those layers, and also tells the model what  

10
00:00:59,600 --> 00:01:04,560
to do with them; it defines the whole path 
all the way from your inputs to your outputs.  

11
00:01:05,280 --> 00:01:10,880
If you've used Keras before, you probably 
started by building your model out by  

12
00:01:10,880 --> 00:01:17,600
hand - you added one layer after another, maybe 
using model.add() or the functional approach.  

13
00:01:18,480 --> 00:01:26,240
And there's nothing wrong with that! But you can 
also pre-load an entire model, weights and all.  

14
00:01:26,960 --> 00:01:33,920
This is really helpful, because if you try 
reading the paper or looking at the code,  

15
00:01:33,920 --> 00:01:38,400
you'll see the inside of a Transformer is 
pretty complex, and writing it all out from  

16
00:01:38,400 --> 00:01:43,280
scratch and getting it right would be hard even 
for an experienced machine learning engineer.  

17
00:01:43,280 --> 00:01:48,080
But because it's all packed inside a Model, you 
don't need to worry about that complexity if  

18
00:01:48,080 --> 00:01:53,840
you don't want to! You have the flexibility to 
write any model you like, but you can also just  

19
00:01:54,400 --> 00:01:58,640
load a pre-trained, pre-configured 
transformer model in one line of code.  

20
00:02:00,000 --> 00:02:09,040
And whether you write your own model from scratch 
or load a pre-trained one, you interact with the  

21
00:02:09,040 --> 00:02:14,560
model in the same way - through the same few 
methods you're going to see again and again,  

22
00:02:15,200 --> 00:02:22,000
like *fit*, *compile* and *predict,* and we'll 
cover concrete examples of how to use those  

23
00:02:22,000 --> 00:02:26,960
methods in other videos that I'll link below. For 
now the key thing to take away from this video, if  

24
00:02:26,960 --> 00:02:31,920
you've never seen Keras before, is that this neat 
encapsulation means that all of the complexity of  

25
00:02:31,920 --> 00:02:36,560
a huge neural net becomes manageable, because 
you interact with it in exactly the same way,  

26
00:02:36,560 --> 00:02:49,760
using exactly the same methods, as you would 
with a simple model that you wrote out by hand.
